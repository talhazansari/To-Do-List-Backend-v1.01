import { Test, TestingModule } from '@nestjs/testing';
import { ItemService } from './item.service';
import { getModelToken } from '@nestjs/mongoose';
import { Item } from 'src/schema/item.schema';
import { Model } from 'mongoose';
import { CreateItemDto } from 'src/dto/create-item.dto';
import { UpdateItemDto } from 'src/dto/update-item.dto';

describe('ItemService', () => {
  let postService: ItemService;
  let model: Model<Item>;
  const mockPostService = {
    findById: jest.fn(),
    findByIdAndDelete: jest.fn(),
    findByIdAndUpdate: jest.fn(),
  };
  const mockPost = {
    _id: '64de05b3e43204f4f21519725',
    description: 'Hello Talha',
    title: "This is nice",
    markdown: "This is great",
    status: true,
  };
  const mockDB = [
    {
      _id: '64de05b3e43204f4f21519725',
      description: 'Hello Talha',
      status: true,
      title: "This is nice",
      markdown: "This is great",
    },
    {
      _id: '64de05b3e43204f4f21519725',
      description: 'Hello Talha',
      status: true,
      title: "This is nice",
      markdown: "This is great",
    },
  ];

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        ItemService,
        {
          provide: getModelToken('Item'),
          useValue: mockPostService,
        },
      ],
    }).compile();
    postService = module.get<ItemService>(ItemService);
    model = module.get<Model<Item>>(getModelToken('Item'));
  });

  describe('findAll', () => {
    it('should return an array of Items', async () => {
      model.find = jest.fn().mockReturnValue(mockDB);
      const result = await postService.getAllItems();
      expect(result).toEqual(mockDB);
    });
    it('should handle error if finding item fails', async () => {
      const error = new Error('Database error');
      model.find = jest.fn().mockRejectedValue(error);
      await expect(postService.getAllItems()).rejects.toThrow(error);
    });
  });
  describe('getPost', () => {
    it('it should find an item and return by post ID', async () => {
      jest.spyOn(model, 'findById').mockResolvedValue(mockPost);
      const result = await postService.getItem(mockPost._id);
      expect(result).toEqual(mockPost);
    });
    it('it should return error if post not found', async () => {
      jest.spyOn(model, 'findById').mockResolvedValue(null);
      const result = postService.getItem(mockPost._id);
      await expect(result).rejects.toThrow();
    });
  });
  describe('create', () => {
    const mockCreatePostDto: CreateItemDto = {
      description: 'Hello Talha',
      status: true,
      title: "This is nice",
      markdown: "This is great",
    };
    const createdPost: CreateItemDto = {
      description: 'Hello Talha',
      status: true,
      title: "This is nice",
      markdown: "This is great",
    };
    const notCreatedPost: CreateItemDto = {
      description: 'Hello Talha',
      status: true,
      title: "This is nice",
      markdown: "This is great",
    };

    it('should create a new item', async () => {
      model.create = jest.fn().mockResolvedValue(mockCreatePostDto);
      const result = await postService.createItem(createdPost);
      expect(result).toEqual(createdPost);
    });
    it('should not create a new post', async () => {
      const error = new Error('Database error');
      model.create = jest.fn().mockRejectedValue(error);
      await expect(postService.createItem(notCreatedPost)).rejects.toThrow(
        error,
      );
    });
  });
  describe('deleteItem', () => {
    const deletedPost = {
      _id: '64de05b3e43204f4f21519725',
      description: 'Hello Talha',
      status: true,
      title: "This is nice",
      markdown: "This is great",
    };
    it('it should delete the post', async () => {
      jest.spyOn(model, 'findByIdAndDelete').mockResolvedValue(mockPost);
      const result = await postService.deleteItem(mockPost._id);
      expect(result).toEqual(deletedPost);
    });
    it('should handle error if deleting a post fails', async () => {
      const postId = 'mockId';
      const error = new Error('Database error');
      model.findByIdAndDelete = jest.fn().mockRejectedValue(error);
      await expect(postService.deleteItem(postId)).rejects.toThrow(error);
    });
  });

  describe('updateItem', () => {
    const updatedPost: UpdateItemDto = {
      description: 'Hello Talha',
      status: true,
      title: "This is nice",
      markdown: "This is great",
    };
    const dummyPostDto: UpdateItemDto = {
      description: 'Hello Talha',
      status: true,
      title: "This is nice",
      markdown: "This is great",
    };
    it('it should find and update the post', async () => {
      jest.spyOn(model, 'findByIdAndUpdate').mockResolvedValue(dummyPostDto);
      const result = await postService.updateItem(
        '620000432323223',
        updatedPost,
      );
      expect(result).toEqual(updatedPost);
    });

    it('should handle error if updating a post fails', async () => {
      const error = new Error('Database error');
      model.findByIdAndUpdate = jest.fn().mockRejectedValue(error);
      await expect(
        postService.updateItem('6200004222323232', updatedPost),
      ).rejects.toThrow(error);
    });
  });
});
